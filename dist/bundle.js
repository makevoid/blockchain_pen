/* Generated by Opal 0.7.2 */
Opal.modules["native"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$to_a', '$to_ary', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$==', '$instance_variable_set', '$members', '$each_with_index', '$each_pair', '$name', '$native_module']);
  (function($base) {
    var self = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$is_a?', function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    });

    Opal.defs(self, '$try_convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return nil;
      }
    ;
    });

    Opal.defs(self, '$convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    });

    Opal.defs(self, '$call', TMP_1 = function(obj, key, args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      TMP_1.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, length = args.length; i < length; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    });

    (function($base) {
      var self = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$alias_native', function(new$, old, options) {
        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, as = nil;

        if (old == null) {
          old = new$
        }
        if (options == null) {
          options = $hash2([], {})
        }
        if ((($a = old['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_2.$$s = self, TMP_2), $a).call($b, new$)
        } else if ((($a = as = options['$[]']("as")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this, block, $a, $b, $c;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_3.$$p || nil, TMP_3.$$p = null;
          if ((($a = value = ($b = ($c = $scope.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], old].concat(args))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, block, $a, $b;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_4.$$p || nil, TMP_4.$$p = null;
          return ($a = ($b = $scope.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], old].concat(args))}, TMP_4.$$s = self, TMP_4), $a).call($d, new$)
        };
      });

      Opal.defn(self, '$native_reader', function(names) {
        var $a, $b, TMP_5, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_6.$$s = self, TMP_6), $a).call($b, name)}, TMP_5.$$s = self, TMP_5), $a).call($b);
      });

      Opal.defn(self, '$native_writer', function(names) {
        var $a, $b, TMP_7, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_8.$$s = self, TMP_8), $a).call($b, "" + (name) + "=")}, TMP_7.$$s = self, TMP_7), $a).call($b);
      });

      Opal.defn(self, '$native_accessor', function(names) {
        var $a, $b, self = this;

        names = $slice.call(arguments, 0);
        ($a = self).$native_reader.apply($a, [].concat(names));
        return ($b = self).$native_writer.apply($b, [].concat(names));
      });
    })(self);

    Opal.defs(self, '$included', function(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    });

    Opal.defn(self, '$initialize', function(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    });

    Opal.defn(self, '$to_n', function() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    });
  })(self);
  (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$native?', function(value) {
      var self = this;

      return value == null || !value.$$class;
    });

    Opal.defn(self, '$Native', function(obj) {
      var $a, self = this;

      if ((($a = obj == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
        } else {
        return obj
      };
    });

    Opal.defn(self, '$Array', TMP_9 = function(object, args) {
      var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_9.$$p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (self['$native?'](object)) {
        return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).apply($b, [object].concat(args)).$to_a();
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    });
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    });

    Opal.defn(self, '$has_key?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$key?', def['$has_key?']);

    Opal.defn(self, '$include?', def['$has_key?']);

    Opal.defn(self, '$member?', def['$has_key?']);

    Opal.defn(self, '$each', TMP_10 = function(args) {
      var $a, self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_10.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          ((($a = Opal.yieldX($yield, [key, self["native"][key]])) === $breaker) ? $breaker.$v : $a)
        }
      ;
        return self;
        } else {
        return ($a = self).$method_missing.apply($a, ["each"].concat(args))
      };
    });

    Opal.defn(self, '$[]', function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    });

    Opal.defn(self, '$[]=', function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    });

    Opal.defn(self, '$merge!', function(other) {
      var self = this;

      
      var other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    });

    Opal.defn(self, '$respond_to?', function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    });

    Opal.defn(self, '$respond_to_missing?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$method_missing', TMP_11 = function(mid, args) {
      var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_11.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, mid.$length()['$-'](1)), args['$[]'](0));
      }
      else {
        return ($a = ($b = Opal.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], mid].concat(args));
      }
    ;
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    });

    Opal.defn(self, '$kind_of?', def['$is_a?']);

    Opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      return self.$$class === klass;
    });

    Opal.defn(self, '$class', function() {
      var self = this;

      return self.$$class;
    });

    Opal.defn(self, '$to_a', TMP_12 = function(options) {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_12.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    });

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    def.$initialize = TMP_13 = function(native$, options) {
      var $a, self = this, $iter = TMP_13.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_13.$$p = null;
      Opal.find_super_dispatcher(self, 'initialize', TMP_13, null).apply(self, [native$]);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    };

    def.$each = TMP_14 = function() {
      var self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        var value = Opal.yield1(block, self['$[]'](i));

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    };

    def['$[]'] = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil) {
        if ((($a = self.block) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    };

    def['$[]='] = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    };

    def.$last = function(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil
      }
      if (count !== false && count !== nil) {
        index = self.$length()['$-'](1);
        result = [];
        while (index['$>='](0)) {
        result['$<<'](self['$[]'](index));
        index = index['$-'](1);};
        return result;
        } else {
        return self['$[]'](self.$length()['$-'](1))
      };
    };

    def.$length = function() {
      var self = this;

      return self["native"][self.length];
    };

    Opal.defn(self, '$to_ary', def.$to_a);

    return (def.$inspect = function() {
      var self = this;

      return self.$to_a().$inspect();
    }, nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope;

    def.matches = nil;
    return (def.$to_n = function() {
      var self = this;

      return self.matches;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope;

    def.$initialize = function(args) {
      var $a, $b, TMP_15, $c, TMP_16, self = this, object = nil;

      args = $slice.call(arguments, 0);
      if ((($a = (($b = args.$length()['$=='](1)) ? self['$native?'](args['$[]'](0)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        object = args['$[]'](0);
        return ($a = ($b = self.$members()).$each, $a.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this;
if (name == null) name = nil;
        return self.$instance_variable_set("@" + (name), self.$Native(object[name]))}, TMP_15.$$s = self, TMP_15), $a).call($b);
        } else {
        return ($a = ($c = self.$members()).$each_with_index, $a.$$p = (TMP_16 = function(name, index){var self = TMP_16.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
        return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_16.$$s = self, TMP_16), $a).call($c)
      };
    };

    return (def.$to_n = function() {
      var $a, $b, TMP_17, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_17 = function(name, value){var self = TMP_17.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = value.$to_n();}, TMP_17.$$s = self, TMP_17), $a).call($b);
      return result;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        if ((obj)['$respond_to?']("to_n")) {
          result.push((obj).$to_n());
        }
        else {
          result.push(obj);
        }
      }

      return result;
    ;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_n = function() {
      var self = this;

      return null;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_18;

    def.$initialize = TMP_18 = function(defaults) {
      var self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      
      if (defaults != null) {
        if (defaults.constructor === Object) {
          var _map = self.map,
              smap = self.smap,
              keys = self.keys,
              map, khash, value;

          for (var key in defaults) {
            value = defaults[key];

            if (key.$$is_string) {
              map = smap;
              khash = key;
            } else {
              map = _map;
              khash = key.$hash();
            }

            if (value && value.constructor === Object) {
              map[khash] = $scope.get('Hash').$new(value);
            }
            else {
              map[khash] = self.$Native(value);
            }

            keys.push(key);
          }
        }
        else {
          self.none = defaults;
        }
      }
      else if (block !== nil) {
        self.proc = block;
      }

      return self;
    
    };

    return (def.$to_n = function() {
      var self = this;

      
      var result = {},
          keys   = self.keys,
          _map   = self.map,
          smap   = self.smap,
          map, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key   = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        value = map[khash];

        if ((value)['$respond_to?']("to_n")) {
          result[key] = (value).$to_n();
        }
        else {
          result[key] = value;
        }
      }

      return result;
    ;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$native_module = function() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, nil) && 'native_module'
  })(self, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope;

    def.$native_alias = function(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError'), "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'");
      }
      self.$$proto[new_jsid] = aliased;
    ;
    };

    return (def.$native_class = function() {
      var self = this;

      self.$native_module();
      self.new = self.$new;
    }, nil) && 'native_class';
  })(self, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, content = nil;

  Opal.add_stubs(['$map', '$[]', '$to_s', '$instance_variables', '$to_proc', '$-', '$==', '$size', '$extend', '$include', '$get', '$utxo_callback', '$lambda', '$to_n', '$post', '$pushtx_callback', '$address', '$require', '$new', '$log', '$address_str', '$hashes_convert', '$each', '$+', '$push', '$>', '$empty?', '$pushtx', '$call', '$sign_and_broadcast', '$utxo', '$received_utxo', '$pvt_key', '$op_return', '$callback_write', '$attr_accessor', '$define_state', '$message', '$write', '$chars=', '$chars', '$submit_disabled=', '$div', '$span', '$spacer', '$on', '$update_counter', '$input', '$button', '$submit_disabled', '$hash', '$hash_file', '$p', '$tx_id', '$present', '$q', '$render', '$create_element']);
  console.log("loading app environment");
  self.$require("browser");
  self.$require("browser/http");
  window.bitcore = require('bitcore');
  (function($base, $super) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$get', function(url, callback) {
      var self = this;

      return $.getJSON(url, function(data){
      console.log("GET", url)
      callback(data)
    });
    });

    return (Opal.defs(self, '$post', function(url, params, callback) {
      var self = this;

      var success = function(data){
      console.log("POST", url)
      callback(data)
    };
      var data = {
      tx: params.tx
    }


    console.log(JSON.stringify(data))
    ;
      ajax = {
      contentType: 'application/json',
      data: JSON.stringify(data),
      dataType: 'json',
      processData: false,
      type: 'POST',
      success: success,
      url: url
    };
      return $.ajax(ajax);
    }), nil) && 'post';
  })(self, null);
  (function($base) {
    var self = $module($base, 'RModel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$attributes', function() {
      var $a, $b, TMP_1, $c, self = this, attrs = nil;

      attrs = ($a = ($b = self.$instance_variables()).$map, $a.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
      return a.$to_s()['$[]']($range(1, -1, false))}, TMP_1.$$s = self, TMP_1), $a).call($b);
      return ($a = ($c = (attrs['$-'](["constructor", "toString"]))).$map, $a.$$p = "to_sym".$to_proc(), $a).call($c);
    })
  })(self);
  (function($base) {
    var self = $module($base, 'DebugHelpers');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$log', function(mex) {
      var self = this;

      mex = $slice.call(arguments, 0);
      if (mex.$size()['$=='](1)) {
        return console.log(mex[0]);
        } else {
        return console.log(mex[0], mex[1]);
      };
    })
  })(self);
  (function($base) {
    var self = $module($base, 'UIHelpers');

    var def = self.$$proto, $scope = self.$$scope;

    self.$extend($scope.get('DebugHelpers'));

    self.$include($scope.get('DebugHelpers'));

    Opal.defn(self, '$q', function(selector) {
      var self = this;

      return document.querySelector(selector);
    });

    Opal.defn(self, '$write', function(elem, content) {
      var self = this;

      return elem.innerHTML = 'content';
    });
  })(self);
  (function($base, $super) {
    function $Blockchain(){};
    var self = $Blockchain = $klass($base, $super, 'Blockchain', $Blockchain);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$utxo', function(address, callback) {
      var self = this, utxo_url = nil;

      console.log(address);
      utxo_url = "https://blockchain.info/unspent?active=" + (address) + "&format=json&cors=true";
      return $scope.get('HTTP').$get(utxo_url, self.$utxo_callback(callback));
    });

    Opal.defs(self, '$utxo_callback', function(callback) {
      var $a, $b, TMP_2, self = this;

      return ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(utxo){var self = TMP_2.$$s || this;
if (utxo == null) utxo = nil;
      return callback(utxo.unspent_outputs);}, TMP_2.$$s = self, TMP_2), $a).call($b);
    });

    Opal.defs(self, '$pushtx', function(tx_hash, callback) {
      var self = this, pushtx_url = nil, post_params = nil;

      pushtx_url = "https://api.blockcypher.com/v1/btc/main/txs/push";
      post_params = $hash2(["tx"], {"tx": tx_hash}).$to_n();
      return $scope.get('HTTP').$post(pushtx_url, post_params, self.$pushtx_callback(callback));
    });

    return (Opal.defs(self, '$pushtx_callback', function(callback) {
      var $a, $b, TMP_3, self = this;

      return ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(tx_info){var self = TMP_3.$$s || this;
if (tx_info == null) tx_info = nil;
      console.log("TX INFO", tx_info);
        return callback(tx_info.hash);}, TMP_3.$$s = self, TMP_3), $a).call($b);
    }), nil) && 'pushtx_callback';
  })(self, null);
  (function($base, $super) {
    function $PrivateKey(){};
    var self = $PrivateKey = $klass($base, $super, 'PrivateKey', $PrivateKey);

    var def = self.$$proto, $scope = self.$$scope;

    def.key = nil;
    def.$initialize = function(key) {
      var self = this;

      return self.key = new bitcore.PrivateKey(key);
    };

    def.$address = function() {
      var self = this, key = nil;

      key = self.key;
      return key.toAddress();
    };

    return (def.$address_str = function() {
      var self = this, address = nil;

      address = self.$address();
      return address.toString();
    }, nil) && 'address_str';
  })(self, null);
  self.$require("native");
  (function($base, $super) {
    function $BitCore(){};
    var self = $BitCore = $klass($base, $super, 'BitCore', $BitCore);

    var def = self.$$proto, $scope = self.$$scope;

    def.pvt_key = def.address = nil;
    self.$include($scope.get('DebugHelpers'));

    Opal.cdecl($scope, 'TX_FEE', 8000);

    def.$initialize = function(pvt_key_string) {
      var self = this;

      self.pvt_key_string = pvt_key_string;
      self.pvt_key = $scope.get('PrivateKey').$new(pvt_key_string);
      self.$log("pvt key", self.pvt_key);
      self.address = self.pvt_key.$address_str();
      return self.$log("address", self.address);
    };

    def.$sign_and_broadcast = function() {
      var $a, $b, TMP_4, self = this;

      return ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(message, utxos){var self = TMP_4.$$s || this, $a, $b, TMP_5, utxos_out = nil, total_amount_sathoshis = nil, fee = nil, address = nil, amount = nil, pvt_key = nil, transaction = nil, tx_hash = nil;
        if (self.address == null) self.address = nil;
        if (self.pvt_key_string == null) self.pvt_key_string = nil;
if (message == null) message = nil;if (utxos == null) utxos = nil;
      self.$log("sign and broadcast");
        utxos = self.$hashes_convert(utxos);
        self.$log("utxo_size", utxos.$size());
        utxos_out = [];
        total_amount_sathoshis = 0;
        ($a = ($b = utxos).$each, $a.$$p = (TMP_5 = function(utxo){var self = TMP_5.$$s || this, amount_satoshis = nil, amount_btc = nil;
          if (self.address == null) self.address = nil;
if (utxo == null) utxo = nil;
        amount_satoshis = utxo['$[]']("value");
          total_amount_sathoshis = total_amount_sathoshis['$+'](amount_satoshis);
          amount_btc = new bitcore.Unit.fromSatoshis(amount_satoshis).BTC;
          self.$log(amount_btc);
          utxos_out.$push($hash2(["address", "txId", "scriptPubKey", "amount", "vout"], {"address": self.address, "txId": utxo['$[]']("tx_hash_big_endian"), "scriptPubKey": utxo['$[]']("script"), "amount": amount_btc, "vout": utxo['$[]']("tx_output_n")}));
          if (amount_satoshis['$>']($scope.get('TX_FEE'))) {
            return ($breaker.$v = nil, $breaker)
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5), $a).call($b);
        self.$log("utxos_out:", utxos_out.$size());
        if ((($a = utxos['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$log("ERROR: Not enough UTXOs")
          } else {
          fee = $scope.get('TX_FEE');
          utxos_out = utxos_out.$to_n();
          address = self.address;
          amount = 1000;
          pvt_key = self.pvt_key_string;
          transaction = new bitcore.Transaction()
          .from(utxos_out)
          .to(address, amount)
          .change(address)
          .fee(fee)
          .addData(message)
          .sign(pvt_key);
          tx_hash = transaction.serialize();
          self.$log(tx_hash);
          $scope.get('Blockchain').$pushtx(tx_hash, self.$pushtx_callback());
        };
        return self.$log("END");}, TMP_4.$$s = self, TMP_4), $a).call($b);
    };

    def.$pushtx_callback = function() {
      var $a, $b, TMP_6, self = this;

      return ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(tx_id){var self = TMP_6.$$s || this;
if (tx_id == null) tx_id = nil;
      self.$log("received tx_id:", tx_id);
        self.$log("TX pushed!!!");
        self.$log("https://live.blockcypher.com/btc/tx/" + (tx_id));
        return self.$log("https://chain.so/tx/BTC/" + (tx_id));}, TMP_6.$$s = self, TMP_6), $a).call($b);
    };

    def.$received_utxo = function(message) {
      var $a, $b, TMP_7, self = this;

      return ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(utxo){var self = TMP_7.$$s || this;
if (utxo == null) utxo = nil;
      self.$log("received UTXO:", utxo);
        return self.$sign_and_broadcast().$call(message, utxo);}, TMP_7.$$s = self, TMP_7), $a).call($b);
    };

    def.$op_return = function(message, callback) {
      var self = this;

      return $scope.get('Blockchain').$utxo(self.address, self.$received_utxo(message));
    };

    return (def.$hashes_convert = function(array) {
      var $a, $b, TMP_8, self = this;

      return ($a = ($b = $scope.get('Array').$new(array)).$map, $a.$$p = (TMP_8 = function(elem){var self = TMP_8.$$s || this;
if (elem == null) elem = nil;
      return $scope.get('Hash').$new(elem)}, TMP_8.$$s = self, TMP_8), $a).call($b);
    }, nil) && 'hashes_convert';
  })(self, null);
  (function($base, $super) {
    function $Pen(){};
    var self = $Pen = $klass($base, $super, 'Pen', $Pen);

    var def = self.$$proto, $scope = self.$$scope;

    self.$extend($scope.get('DebugHelpers'));

    Opal.defs(self, '$pvt_key', function() {
      var self = this;

      return "L1dkBEcCKUdbn5xgmgmeJWJYE6jWb1UmiwQJjet2ZuQPrYLHoKKM";
    });

    Opal.defs(self, '$write', function(message) {
      var self = this, bitcore = nil;

      self.$log("stylus - preparing to write: " + (message));
      bitcore = $scope.get('BitCore').$new(self.$pvt_key());
      return bitcore.$op_return(message, self.$callback_write());
    });

    return (Opal.defs(self, '$callback_write', function() {
      var $a, $b, TMP_9, self = this;

      return ($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(tx_id){var self = TMP_9.$$s || this;
if (tx_id == null) tx_id = nil;
      return self.$log("stylus - wrote message! tx_id:", tx_id)}, TMP_9.$$s = self, TMP_9), $a).call($b);
    }), nil) && 'callback_write';
  })(self, null);
  (function($base, $super) {
    function $Wallet(){};
    var self = $Wallet = $klass($base, $super, 'Wallet', $Wallet);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_10;

    self.$include($scope.get('RModel'));

    self.$attr_accessor("address", "balance");

    def.$initialize = function($kwargs) {
      var self = this, address = nil, balance = nil;

      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      }
      if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expecting keyword args');
      }
      if ((address = $kwargs.smap['address']) == null) {
        throw new Error('expecting keyword arg: address')
      }
      if ((balance = $kwargs.smap['balance']) == null) {
        throw new Error('expecting keyword arg: balance')
      }
      self.address = address;
      return self.balance = balance;
    };

    return Opal.cdecl($scope, 'TEST', ($a = ($b = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

    return $scope.get('Wallet').$new($hash2(["address", "balance"], {"address": "1asd", "balance": 10000}))}, TMP_10.$$s = self, TMP_10), $a).call($b));
  })(self, null);
  (function($base, $super) {
    function $Hasher(){};
    var self = $Hasher = $klass($base, $super, 'Hasher', $Hasher);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$hash_file', function() {
      var self = this;

      return nil;
    });

    return (Opal.defs(self, '$hash', function(file) {
      var self = this;

      

    reader = new FileReader();
    reader.onload = function(data) {
      window.crypto.subtle.digest(
        {
            name: "SHA-256",
        },
        data
      )
      .then(function(hash){
        console.log(new Uint8Array(hash))
      })
      .catch(function(err){
          console.error(err)
      })
    }
    reader.readAsArrayBuffer(file)

    
    }), nil) && 'hash';
  })(self, null);
  (function($base, $super) {
    function $MessageForm(){};
    var self = $MessageForm = $klass($base, $super, 'MessageForm', $MessageForm);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_11, $c, TMP_12;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    self.$extend($scope.get('DebugHelpers'));

    self.$extend($scope.get('UIHelpers'));

    self.$include($scope.get('UIHelpers'));

    ($a = ($b = self).$define_state, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

    return 0}, TMP_11.$$s = self, TMP_11), $a).call($b, "chars");

    ($a = ($c = self).$define_state, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

    return false}, TMP_12.$$s = self, TMP_12), $a).call($c, "submit_disabled");

    Opal.cdecl($scope, 'MAX_CHARS', 75);

    def.$write = function() {
      var self = this;

      self.$log("writing message: " + (self.$message()));
      return $scope.get('Pen').$write(self.$message());
    };

    def.$message = function() {
      var self = this;

      return document.querySelector("input[name=message]").value;
    };

    def.$update_counter = function() {
      var $a, $b, self = this;

      (($a = [$scope.get('String').$new(self.$message()).$size()]), $b = self, $b['$chars='].apply($b, $a), $a[$a.length-1]);
      if (self.$chars()['$>']($scope.get('MAX_CHARS'))) {
        return (($a = [true]), $b = self, $b['$submit_disabled='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    };

    def.$render = function() {
      var $a, $b, TMP_13, self = this;

      return ($a = ($b = self).$div, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a, $b, TMP_14, $c, TMP_17;

      ($a = ($b = self).$div, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $a, $b, TMP_15, $c, TMP_16;

        ($a = ($b = self).$span, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

          return self.$chars()}, TMP_15.$$s = self, TMP_15), $a).call($b);
          return ($a = ($c = self).$span, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

          return " / " + ($scope.get('MAX_CHARS')) + " chars"}, TMP_16.$$s = self, TMP_16), $a).call($c);}, TMP_14.$$s = self, TMP_14), $a).call($b, $hash2(["className"], {"className": "row align-right"}));
        self.$spacer();
        return ($a = ($c = self).$div, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, TMP_18, $c, TMP_20;

        ($a = ($b = self).$div, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $a, $b, TMP_19;

          return ($a = ($b = self.$input($hash2(["name", "placeholder", "type"], {"name": "message", "placeholder": "your important message...", "type": "text"}))).$on, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

            return self.$update_counter()}, TMP_19.$$s = self, TMP_19), $a).call($b, "change")}, TMP_18.$$s = self, TMP_18), $a).call($b, $hash2(["className"], {"className": "five columns"}));
          return ($a = ($c = self).$div, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $a, $b, TMP_21, $c, $d, TMP_22;

          return ($a = ($b = ($c = ($d = self).$button, $c.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

            return "Write"}, TMP_22.$$s = self, TMP_22), $c).call($d, $hash2(["disabled"], {"disabled": self.$submit_disabled()}))).$on, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

            return self.$write()}, TMP_21.$$s = self, TMP_21), $a).call($b, "click")}, TMP_20.$$s = self, TMP_20), $a).call($c, $hash2(["className"], {"className": "one columns"}));}, TMP_17.$$s = self, TMP_17), $a).call($c, $hash2(["className"], {"className": "row"}));}, TMP_13.$$s = self, TMP_13), $a).call($b, $hash2(["className"], {"className": "message_input"}));
    };

    return (def.$spacer = function() {
      var self = this;

      return self.$div($hash2(["className"], {"className": "spacer10"}));
    }, nil) && 'spacer';
  })(self, null);
  (function($base, $super) {
    function $FileForm(){};
    var self = $FileForm = $klass($base, $super, 'FileForm', $FileForm);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_23;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    self.$extend($scope.get('DebugHelpers'));

    ($a = ($b = self).$define_state, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

    return false}, TMP_23.$$s = self, TMP_23), $a).call($b, "submit_disabled");

    def.$hash_file = function() {
      var self = this;

      $scope.get('Hasher').$hash(document.querySelector("input[name=file]").files[0]);
      return console.log("hash file called!!!");
    };

    return (def.$render = function() {
      var $a, $b, TMP_24, self = this;

      return ($a = ($b = self).$div, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $a, $b, TMP_25;

      return ($a = ($b = self).$div, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $a, $b, TMP_26, $c, TMP_27;

        ($a = ($b = self).$div, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

          return self.$input($hash2(["name", "type"], {"name": "file", "type": "file"}))}, TMP_26.$$s = self, TMP_26), $a).call($b, $hash2(["className"], {"className": "five columns"}));
          return ($a = ($c = self).$div, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $a, $b, TMP_28, $c, $d, TMP_29;

          return ($a = ($b = ($c = ($d = self).$button, $c.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

            return "Write hash"}, TMP_29.$$s = self, TMP_29), $c).call($d, $hash2(["disabled"], {"disabled": self.$submit_disabled()}))).$on, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

            return self.$hash_file()}, TMP_28.$$s = self, TMP_28), $a).call($b, "click")}, TMP_27.$$s = self, TMP_27), $a).call($c, $hash2(["className"], {"className": "one columns"}));}, TMP_25.$$s = self, TMP_25), $a).call($b, $hash2(["className"], {"className": "row"}))}, TMP_24.$$s = self, TMP_24), $a).call($b, $hash2(["className"], {"className": "message_input"}));
    }, nil) && 'render';
  })(self, null);
  (function($base, $super) {
    function $Success(){};
    var self = $Success = $klass($base, $super, 'Success', $Success);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_30;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    ($a = ($b = self).$define_state, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

    return ""}, TMP_30.$$s = self, TMP_30), $a).call($b, "tx_id");

    return (def.$render = function() {
      var $a, $b, TMP_31, self = this;

      return ($a = ($b = self).$div, $a.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

      self.$p("Message written:");
        return self.$p(self.$tx_id());}, TMP_31.$$s = self, TMP_31), $a).call($b, $hash2(["className"], {"className": "success"}));
    }, nil) && 'render';
  })(self, null);
  (function($base, $super) {
    function $BCPen(){};
    var self = $BCPen = $klass($base, $super, 'BCPen', $BCPen);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include((($scope.get('React')).$$scope.get('Component')));

    return (def.$render = function() {
      var $a, $b, TMP_32, self = this;

      return ($a = ($b = self).$div, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

      return self.$present($scope.get('MessageForm'))}, TMP_32.$$s = self, TMP_32), $a).call($b, $hash2(["className"], {"className": "bc_stylus"}));
    }, nil) && 'render';
  })(self, null);
  self.$extend($scope.get('UIHelpers'));
  self.$log("loading app.rb");
  content = self.$q(".content");
  return $scope.get('React').$render($scope.get('React').$create_element($scope.get('BCPen')), content);
})(Opal);
